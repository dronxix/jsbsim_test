"""
Aircraft Visualization System using Matplotlib
3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑–¥—É—à–Ω—ã—Ö –±–æ–µ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
"""

import matplotlib.pyplot as plt
import matplotlib.animation as animation
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import json
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
import colorsys
from matplotlib.patches import Circle
from matplotlib.collections import Line3DCollection
import matplotlib.patches as mpatches

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
TEAM_COLORS = {
    "red": "#FF4444",
    "blue": "#4444FF",
    "missile": "#FFD700",
    "explosion": "#FF6600"
}

# –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–∞–º–æ–ª–µ—Ç–æ–≤
AIRCRAFT_SYMBOLS = {
    "f16": "^",
    "f15": "s", 
    "f18": "D",
    "f22": "o"
}

@dataclass
class VisualizationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    figure_size: Tuple[int, int] = (15, 10)
    dpi: int = 100
    interval: int = 100  # –º—Å –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
    trail_length: int = 50  # –¥–ª–∏–Ω–∞ —Å–ª–µ–¥–∞ —Å–∞–º–æ–ª–µ—Ç–∞
    missile_trail_length: int = 20
    show_radar_range: bool = True
    show_weapon_range: bool = True
    show_airspace_bounds: bool = True
    show_altitude_grid: bool = True
    camera_follow: Optional[str] = None  # ID —Å–∞–º–æ–ª–µ—Ç–∞ –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
    
class AircraftVisualizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–¥—É—à–Ω—ã—Ö –±–æ–µ–≤"""
    
    def __init__(self, config: VisualizationConfig = None):
        self.config = config or VisualizationConfig()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ 3D –æ—Å–∏
        self.fig = plt.figure(figsize=self.config.figure_size, dpi=self.config.dpi)
        self.ax = self.fig.add_subplot(111, projection='3d')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        self._setup_axes()
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.aircraft_data = {}
        self.missile_data = {}
        self.aircraft_trails = {}
        self.missile_trails = {}
        self.explosion_effects = []
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.aircraft_plots = {}
        self.missile_plots = {}
        self.trail_plots = {}
        self.range_circles = {}
        self.info_texts = {}
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.animation = None
        self.frame_data = []
        self.current_frame = 0
        
        print("üé® Aircraft Visualizer initialized")
        print(f"   Figure size: {self.config.figure_size}")
        print(f"   Trail length: {self.config.trail_length}")
    
    def _setup_axes(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç 3D –æ—Å–∏"""
        # –ü—Ä–µ–¥–µ–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–º–∏)
        self.ax.set_xlim([-100_000, 100_000])
        self.ax.set_ylim([-100_000, 100_000])
        self.ax.set_zlim([0, 20_000])
        
        # –ü–æ–¥–ø–∏—Å–∏
        self.ax.set_xlabel('X (–º)', fontsize=12)
        self.ax.set_ylabel('Y (–º)', fontsize=12)
        self.ax.set_zlabel('–í—ã—Å–æ—Ç–∞ (–º)', fontsize=12)
        
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞
        self.ax.xaxis.pane.fill = False
        self.ax.yaxis.pane.fill = False
        self.ax.zaxis.pane.fill = False
        self.ax.xaxis.pane.set_edgecolor('w')
        self.ax.yaxis.pane.set_edgecolor('w')
        self.ax.zaxis.pane.set_edgecolor('w')
        self.ax.grid(True, alpha=0.3)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.ax.set_title('Air Combat Simulation', fontsize=16, fontweight='bold')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
        self._create_legend()
    
    def _create_legend(self):
        """–°–æ–∑–¥–∞–µ—Ç –ª–µ–≥–µ–Ω–¥—É"""
        legend_elements = [
            mpatches.Patch(color=TEAM_COLORS["red"], label='Red Team'),
            mpatches.Patch(color=TEAM_COLORS["blue"], label='Blue Team'),
            mpatches.Patch(color=TEAM_COLORS["missile"], label='Missiles'),
            plt.Line2D([0], [0], marker='^', color='w', markerfacecolor='black', 
                      markersize=8, label='F-16'),
            plt.Line2D([0], [0], marker='s', color='w', markerfacecolor='black', 
                      markersize=8, label='F-15'),
        ]
        
        self.ax.legend(handles=legend_elements, loc='upper right', bbox_to_anchor=(1.1, 1))
    
    def _setup_airspace_bounds(self, bounds: Dict[str, float]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        if not self.config.show_airspace_bounds:
            return
        
        x_min, x_max = bounds['x_min'], bounds['x_max']
        y_min, y_max = bounds['y_min'], bounds['y_max']
        z_min, z_max = bounds['z_min'], bounds['z_max']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–µ–ª—ã –æ—Å–µ–π
        self.ax.set_xlim([x_min, x_max])
        self.ax.set_ylim([y_min, y_max])
        self.ax.set_zlim([z_min, z_max])
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        corners = [
            [x_min, x_max, x_max, x_min, x_min],
            [y_min, y_min, y_max, y_max, y_min]
        ]
        
        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        self.ax.plot(corners[0], corners[1], [z_min]*5, 'k--', alpha=0.3, linewidth=1)
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞  
        self.ax.plot(corners[0], corners[1], [z_max]*5, 'k--', alpha=0.3, linewidth=1)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in range(4):
            self.ax.plot([corners[0][i], corners[0][i]], 
                        [corners[1][i], corners[1][i]], 
                        [z_min, z_max], 'k--', alpha=0.3, linewidth=1)
    
    def _get_aircraft_color(self, aircraft: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —Å–∞–º–æ–ª–µ—Ç–∞"""
        base_color = TEAM_COLORS[aircraft["team"]]
        
        # –ó–∞—Ç–µ–º–Ω—è–µ–º –µ—Å–ª–∏ —Å–∞–º–æ–ª–µ—Ç –ø–æ–¥–±–∏—Ç
        if aircraft["hp"] < 50:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è
            rgb = plt.colors.to_rgb(base_color)
            hsv = colorsys.rgb_to_hsv(*rgb)
            darkened_hsv = (hsv[0], hsv[1], hsv[2] * 0.6)
            return colorsys.hsv_to_rgb(*darkened_hsv)
        
        return base_color
    
    def _draw_aircraft(self, aircraft: Dict[str, Any], frame_idx: int):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–∞–º–æ–ª–µ—Ç"""
        aircraft_id = aircraft["id"]
        pos = aircraft["position"]
        
        if not aircraft["alive"]:
            # –£–±–∏—Ä–∞–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–∞–º–æ–ª–µ—Ç—ã
            if aircraft_id in self.aircraft_plots:
                self.aircraft_plots[aircraft_id].remove()
                del self.aircraft_plots[aircraft_id]
            return
        
        # –¶–≤–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä
        color = self._get_aircraft_color(aircraft)
        size = 100 + (aircraft["hp"] / 100.0) * 50  # —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç HP
        
        # –°–∏–º–≤–æ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        symbol = AIRCRAFT_SYMBOLS.get(aircraft.get("aircraft_type", "f16"), "^")
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
        if aircraft_id in self.aircraft_plots:
            self.aircraft_plots[aircraft_id].remove()
        
        self.aircraft_plots[aircraft_id] = self.ax.scatter(
            pos[0], pos[1], pos[2],
            c=[color], s=size, marker=symbol, 
            edgecolors='black', linewidths=1,
            alpha=0.9, depthshade=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥
        self._update_aircraft_trail(aircraft_id, pos, color)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–¥–∞—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.config.show_radar_range:
            self._draw_radar_range(aircraft_id, pos, aircraft.get("radar_range", 80000))
    
    def _update_aircraft_trail(self, aircraft_id: str, position: List[float], color: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–µ–¥ —Å–∞–º–æ–ª–µ—Ç–∞"""
        if aircraft_id not in self.aircraft_trails:
            self.aircraft_trails[aircraft_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        self.aircraft_trails[aircraft_id].append(position.copy())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ª–µ–¥–∞
        if len(self.aircraft_trails[aircraft_id]) > self.config.trail_length:
            self.aircraft_trails[aircraft_id].pop(0)
        
        # –†–∏—Å—É–µ–º —Å–ª–µ–¥
        trail = self.aircraft_trails[aircraft_id]
        if len(trail) > 1:
            if aircraft_id in self.trail_plots:
                self.trail_plots[aircraft_id].remove()
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–µ–¥–∞
            trail_array = np.array(trail)
            segments = []
            colors = []
            
            for i in range(len(trail) - 1):
                segments.append([trail[i], trail[i+1]])
                alpha = (i + 1) / len(trail) * 0.7  # –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                colors.append((*plt.colors.to_rgb(color), alpha))
            
            if segments:
                line_collection = Line3DCollection(segments, colors=colors, linewidths=2)
                self.trail_plots[aircraft_id] = self.ax.add_collection3d(line_collection)
    
    def _draw_radar_range(self, aircraft_id: str, position: List[float], radar_range: float):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–¥–∞—Ä–∞"""
        # –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤ —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å
        if self.config.camera_follow != aircraft_id:
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–π –≤—ã—Å–æ—Ç–µ
        theta = np.linspace(0, 2*np.pi, 50)
        x_circle = position[0] + radar_range * np.cos(theta)
        y_circle = position[1] + radar_range * np.sin(theta)
        z_circle = np.full_like(x_circle, position[2])
        
        if aircraft_id in self.range_circles:
            self.range_circles[aircraft_id].remove()
        
        self.range_circles[aircraft_id] = self.ax.plot(
            x_circle, y_circle, z_circle,
            '--', color='gray', alpha=0.3, linewidth=1
        )[0]
    
    def _draw_missile(self, missile: Dict[str, Any], frame_idx: int):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ä–∞–∫–µ—Ç—É"""
        missile_id = missile["id"]
        pos = missile["position"]
        
        if not missile["active"]:
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã
            if missile_id in self.missile_plots:
                self.missile_plots[missile_id].remove()
                del self.missile_plots[missile_id]
            return
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–∫–µ—Ç—ã
        if missile_id in self.missile_plots:
            self.missile_plots[missile_id].remove()
        
        # –†–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∫–µ—Ç—ã
        missile_type = missile.get("type", "")
        if "LONG_RANGE" in missile_type:
            size = 50
            marker = "d"
        elif "MEDIUM_RANGE" in missile_type:
            size = 40
            marker = "v"
        else:
            size = 30
            marker = "o"
        
        self.missile_plots[missile_id] = self.ax.scatter(
            pos[0], pos[1], pos[2],
            c=[TEAM_COLORS["missile"]], s=size, marker=marker,
            edgecolors='red', linewidths=1,
            alpha=0.8
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥ —Ä–∞–∫–µ—Ç—ã
        self._update_missile_trail(missile_id, pos)
    
    def _update_missile_trail(self, missile_id: str, position: List[float]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–µ–¥ —Ä–∞–∫–µ—Ç—ã"""
        if missile_id not in self.missile_trails:
            self.missile_trails[missile_id] = []
        
        self.missile_trails[missile_id].append(position.copy())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ª–µ–¥–∞
        if len(self.missile_trails[missile_id]) > self.config.missile_trail_length:
            self.missile_trails[missile_id].pop(0)
        
        # –†–∏—Å—É–µ–º —Å–ª–µ–¥
        trail = self.missile_trails[missile_id]
        if len(trail) > 1:
            trail_array = np.array(trail)
            self.ax.plot(trail_array[:, 0], trail_array[:, 1], trail_array[:, 2],
                        '-', color=TEAM_COLORS["missile"], alpha=0.6, linewidth=1)
    
    def _draw_info_panel(self, frame_data: Dict[str, Any]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        info_text = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–µ
        info_text.append(f"Time: {frame_data['timestamp']:.1f}s")
        info_text.append(f"Red Team: {len([a for a in frame_data['aircraft'] if a['team'] == 'red' and a['alive']])}")
        info_text.append(f"Blue Team: {len([a for a in frame_data['aircraft'] if a['team'] == 'blue' and a['alive']])}")
        info_text.append(f"Active Missiles: {len([m for m in frame_data['missiles'] if m['active']])}")
        info_text.append(f"Total Kills: Red {frame_data['kills']['red']}, Blue {frame_data['kills']['blue']}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        info_str = '\n'.join(info_text)
        if hasattr(self, 'info_text_obj'):
            self.info_text_obj.remove()
        
        self.info_text_obj = self.fig.text(0.02, 0.98, info_str, 
                                          fontsize=10, verticalalignment='top',
                                          bbox=dict(boxstyle="round,pad=0.3", 
                                                   facecolor="white", alpha=0.8))
    
    def _draw_altitude_indicators(self, frame_data: Dict[str, Any]):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã—Å–æ—Ç—ã"""
        if not self.config.show_altitude_grid:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Å–æ—Ç
        altitudes = [a["position"][2] for a in frame_data["aircraft"] if a["alive"]]
        if not altitudes:
            return
        
        min_alt, max_alt = min(altitudes), max(altitudes)
        
        # –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∫–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –≤—ã—Å–æ—Ç–∞—Ö
        key_altitudes = [5000, 10000, 15000]  # 5, 10, 15 –∫–º
        
        bounds = frame_data.get("airspace_bounds", {
            "x_min": -100000, "x_max": 100000,
            "y_min": -100000, "y_max": 100000
        })
        
        for alt in key_altitudes:
            if bounds["z_min"] <= alt <= bounds["z_max"]:
                x_grid = [bounds["x_min"], bounds["x_max"], bounds["x_max"], bounds["x_min"], bounds["x_min"]]
                y_grid = [bounds["y_min"], bounds["y_min"], bounds["y_max"], bounds["y_max"], bounds["y_min"]]
                z_grid = [alt] * 5
                
                self.ax.plot(x_grid, y_grid, z_grid, 
                           color='lightgray', alpha=0.2, linewidth=0.5)
    
    def _update_camera(self, frame_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã"""
        if not self.config.camera_follow:
            return
        
        # –ò—â–µ–º —Å–∞–º–æ–ª–µ—Ç –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è
        followed_aircraft = None
        for aircraft in frame_data["aircraft"]:
            if aircraft["id"] == self.config.camera_follow and aircraft["alive"]:
                followed_aircraft = aircraft
                break
        
        if not followed_aircraft:
            return
        
        pos = followed_aircraft["position"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –Ω–∞ —Å–∞–º–æ–ª–µ—Ç —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
        range_size = 50000  # —Ä–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞ 50–∫–º
        
        self.ax.set_xlim([pos[0] - range_size, pos[0] + range_size])
        self.ax.set_ylim([pos[1] - range_size, pos[1] + range_size])
        self.ax.set_zlim([max(0, pos[2] - 10000), pos[2] + 10000])
    
    def load_battle_data(self, data_source):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—è –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–ø–∏—Å–∫–∞"""
        if isinstance(data_source, str):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ JSON —Ñ–∞–π–ª–∞
            with open(data_source, 'r') as f:
                data = json.load(f)
            
            if "frames" in data:
                self.frame_data = data["frames"]
            else:
                self.frame_data = [data]  # –û–¥–∏–Ω –∫–∞–¥—Ä
        elif isinstance(data_source, list):
            # –ü—Ä—è–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞–¥—Ä–æ–≤
            self.frame_data = data_source
        else:
            # –û–¥–∏–Ω –∫–∞–¥—Ä
            self.frame_data = [data_source]
        
        print(f"üìä Loaded {len(self.frame_data)} frames for visualization")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if self.frame_data:
            first_frame = self.frame_data[0]
            if "airspace_bounds" in first_frame:
                self._setup_airspace_bounds(first_frame["airspace_bounds"])
    
    def animate_frame(self, frame_idx: int):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–∞–¥—Ä"""
        if frame_idx >= len(self.frame_data):
            return
        
        frame_data = self.frame_data[frame_idx]
        self.current_frame = frame_idx
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫—Ä–æ–º–µ —Å–ª–µ–¥–æ–≤)
        for plot_dict in [self.aircraft_plots, self.missile_plots, self.range_circles]:
            for plot_obj in list(plot_dict.values()):
                if hasattr(plot_obj, 'remove'):
                    plot_obj.remove()
            plot_dict.clear()
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–∞–º–æ–ª–µ—Ç—ã
        for aircraft in frame_data.get("aircraft", []):
            self._draw_aircraft(aircraft, frame_idx)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞–∫–µ—Ç—ã
        for missile in frame_data.get("missiles", []):
            self._draw_missile(missile, frame_idx)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã—Å–æ—Ç—ã
        self._draw_altitude_indicators(frame_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        self._draw_info_panel(frame_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É
        self._update_camera(frame_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        timestamp = frame_data.get("timestamp", frame_idx)
        self.ax.set_title(f'Air Combat Simulation - T+{timestamp:.1f}s (Frame {frame_idx+1}/{len(self.frame_data)})', 
                         fontsize=16, fontweight='bold')
    
    def create_animation(self, interval: int = None) -> animation.FuncAnimation:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é"""
        if not self.frame_data:
            raise ValueError("No frame data loaded. Call load_battle_data first.")
        
        interval = interval or self.config.interval
        
        def animate(frame):
            self.animate_frame(frame)
            return []
        
        self.animation = animation.FuncAnimation(
            self.fig, animate, frames=len(self.frame_data),
            interval=interval, blit=False, repeat=True
        )
        
        return self.animation
    
    def save_animation(self, filename: str, fps: int = 10, dpi: int = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        if not self.animation:
            self.create_animation()
        
        dpi = dpi or self.config.dpi
        
        print(f"üíæ Saving animation to {filename} (fps={fps}, dpi={dpi})")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º writer –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        if filename.endswith('.gif'):
            writer = animation.PillowWriter(fps=fps)
        elif filename.endswith('.mp4'):
            writer = animation.FFMpegWriter(fps=fps, bitrate=1800)
        else:
            writer = animation.FFMpegWriter(fps=fps, bitrate=1800)
        
        self.animation.save(filename, writer=writer, dpi=dpi)
        print(f"‚úÖ Animation saved: {filename}")
    
    def show_static_frame(self, frame_idx: int = 0):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–¥—Ä"""
        self.animate_frame(frame_idx)
        plt.show()
    
    def show_interactive(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        if not self.frame_data:
            raise ValueError("No frame data loaded")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from matplotlib.widgets import Slider, Button
        
        # –î–µ–ª–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
        plt.subplots_adjust(bottom=0.2)
        
        # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –∫–∞–¥—Ä–æ–≤
        ax_frame = plt.axes([0.2, 0.1, 0.5, 0.03])
        frame_slider = Slider(ax_frame, 'Frame', 0, len(self.frame_data)-1, 
                             valinit=0, valfmt='%d')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ax_play = plt.axes([0.1, 0.05, 0.1, 0.04])
        play_button = Button(ax_play, 'Play')
        
        ax_pause = plt.axes([0.25, 0.05, 0.1, 0.04])
        pause_button = Button(ax_pause, 'Pause')
        
        def update_frame(val):
            frame_idx = int(frame_slider.val)
            self.animate_frame(frame_idx)
            self.fig.canvas.draw()
        
        def play_animation(event):
            if not self.animation:
                self.create_animation()
            # matplotlib animation control is complex, just create new animation
            
        def pause_animation(event):
            if self.animation:
                self.animation.event_source.stop()
        
        frame_slider.on_changed(update_frame)
        play_button.on_clicked(play_animation)
        pause_button.on_clicked(pause_animation)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
        self.animate_frame(0)
        
        plt.show()

class BattleRecorderVisualizer:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–ø–∏—Å–∏ –±–æ–µ–≤"""
    
    def __init__(self, visualizer: AircraftVisualizer):
        self.visualizer = visualizer
    
    def export_from_env_data(self, env_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        frames = []
        
        for frame_data in env_data:
            viz_frame = {
                "timestamp": frame_data.get("timestamp", 0),
                "aircraft": [],
                "missiles": [],
                "kills": frame_data.get("kills", {"red": 0, "blue": 0}),
                "missiles_fired": frame_data.get("missiles_fired", {"red": 0, "blue": 0}),
                "airspace_bounds": frame_data.get("airspace_bounds", {
                    "x_min": -100000, "x_max": 100000,
                    "y_min": -100000, "y_max": 100000,
                    "z_min": 1000, "z_max": 20000
                }),
                "engagement_range": frame_data.get("engagement_range", 50000)
            }
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–ª–µ—Ç–æ–≤
            for aircraft_data in frame_data.get("aircraft", []):
                viz_aircraft = {
                    "id": aircraft_data["id"],
                    "team": aircraft_data["team"],
                    "position": aircraft_data["position"],
                    "velocity": aircraft_data.get("velocity", [0, 0, 0]),
                    "alive": aircraft_data["alive"],
                    "hp": aircraft_data["hp"],
                    "fuel": aircraft_data.get("fuel", 1.0),
                    "heading": aircraft_data.get("heading", 0),
                    "altitude": aircraft_data["position"][2],
                    "speed": np.linalg.norm(aircraft_data.get("velocity", [0, 0, 0])),
                    "aircraft_type": aircraft_data.get("aircraft_type", "f16"),
                    "weapons": aircraft_data.get("weapons", {}),
                    "radar_range": aircraft_data.get("radar_range", 80000)
                }
                viz_frame["aircraft"].append(viz_aircraft)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∫–µ—Ç
            for missile_data in frame_data.get("missiles", []):
                viz_missile = {
                    "id": missile_data["id"],
                    "shooter_id": missile_data["shooter_id"],
                    "target_id": missile_data["target_id"],
                    "position": missile_data["position"],
                    "type": missile_data.get("type", "MEDIUM_RANGE_MISSILE"),
                    "active": missile_data["active"],
                    "fuel": missile_data.get("fuel", 1.0)
                }
                viz_frame["missiles"].append(viz_missile)
            
            frames.append(viz_frame)
        
        return frames

def create_battle_visualization(battle_data_path: str, 
                               config: VisualizationConfig = None,
                               save_path: str = None,
                               show_interactive: bool = True) -> AircraftVisualizer:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—è"""
    
    visualizer = AircraftVisualizer(config)
    visualizer.load_battle_data(battle_data_path)
    
    if save_path:
        animation = visualizer.create_animation()
        visualizer.save_animation(save_path)
    
    if show_interactive:
        visualizer.show_interactive()
    
    return visualizer

def demo_visualization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üé¨ Creating demo air combat visualization...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    demo_frames = []
    
    for t in range(100):  # 10 —Å–µ–∫—É–Ω–¥ –∞–Ω–∏–º–∞—Ü–∏–∏
        frame = {
            "timestamp": t * 0.1,
            "aircraft": [],
            "missiles": [],
            "kills": {"red": 0, "blue": 0},
            "missiles_fired": {"red": 0, "blue": 0},
            "airspace_bounds": {
                "x_min": -50000, "x_max": 50000,
                "y_min": -50000, "y_max": 50000,
                "z_min": 5000, "z_max": 15000
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–ª–µ—Ç—ã
        for i in range(2):  # 2 –∫—Ä–∞—Å–Ω—ã—Ö
            aircraft = {
                "id": f"red_{i}",
                "team": "red",
                "position": [
                    -20000 + i * 5000 + t * 100,  # –¥–≤–∏–∂—É—Ç—Å—è –Ω–∞ –≤–æ—Å—Ç–æ–∫
                    i * 10000 - 5000,
                    8000 + 1000 * np.sin(t * 0.1 + i)  # –Ω–µ–±–æ–ª—å—à–∏–µ –º–∞–Ω–µ–≤—Ä—ã
                ],
                "velocity": [100, 0, 10 * np.cos(t * 0.1 + i)],
                "alive": True,
                "hp": max(0, 100 - t * 0.5),  # –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ç–µ—Ä—è—é—Ç HP
                "fuel": max(0.1, 1.0 - t * 0.01),
                "heading": 90,
                "aircraft_type": "f16",
                "radar_range": 80000
            }
            frame["aircraft"].append(aircraft)
        
        for i in range(2):  # 2 —Å–∏–Ω–∏—Ö
            aircraft = {
                "id": f"blue_{i}",
                "team": "blue",
                "position": [
                    20000 - i * 5000 - t * 100,  # –¥–≤–∏–∂—É—Ç—Å—è –Ω–∞ –∑–∞–ø–∞–¥
                    i * 10000 - 5000,
                    8000 + 1000 * np.cos(t * 0.1 + i + np.pi)
                ],
                "velocity": [-100, 0, -10 * np.sin(t * 0.1 + i)],
                "alive": True,
                "hp": max(0, 100 - t * 0.3),
                "fuel": max(0.1, 1.0 - t * 0.01),
                "heading": 270,
                "aircraft_type": "f15",
                "radar_range": 80000
            }
            frame["aircraft"].append(aircraft)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∫–µ—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –±–æ—è
        if 30 <= t <= 70 and t % 10 == 0:
            missile = {
                "id": f"missile_{t}",
                "shooter_id": "red_0",
                "target_id": "blue_0", 
                "position": [
                    -10000 + (t-30) * 200,
                    0,
                    8000
                ],
                "type": "MEDIUM_RANGE_MISSILE",
                "active": True,
                "fuel": 1.0 - (t-30) * 0.02
            }
            frame["missiles"].append(missile)
        
        demo_frames.append(frame)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    config = VisualizationConfig(
        figure_size=(16, 12),
        interval=100,
        trail_length=30,
        show_radar_range=False,  # –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –¥–µ–º–æ
        camera_follow="red_0"    # —Å–ª–µ–¥–∏–º –∑–∞ –ø–µ—Ä–≤—ã–º –∫—Ä–∞—Å–Ω—ã–º
    )
    
    visualizer = AircraftVisualizer(config)
    visualizer.load_battle_data(demo_frames)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–¥—Ä
    print("üìä Showing demo frame...")
    visualizer.show_static_frame(50)  # —Å–µ—Ä–µ–¥–∏–Ω–∞ –±–æ—è
    
    return visualizer

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
def analyze_battle_statistics(frame_data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –±–æ—è"""
    
    if not frame_data:
        return {}
    
    stats = {
        "duration": len(frame_data) * 0.1,  # —Å–µ–∫—É–Ω–¥—ã
        "participants": {},
        "casualties": {"red": 0, "blue": 0},
        "missiles_fired": {"red": 0, "blue": 0},
        "max_altitude": 0,
        "min_altitude": float('inf'),
        "max_speed": 0,
        "engagement_range": 0
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for frame in frame_data:
        for aircraft in frame.get("aircraft", []):
            if aircraft["id"] not in stats["participants"]:
                stats["participants"][aircraft["id"]] = {
                    "team": aircraft["team"],
                    "aircraft_type": aircraft.get("aircraft_type", "unknown"),
                    "max_altitude": aircraft["position"][2],
                    "min_altitude": aircraft["position"][2],
                    "max_speed": np.linalg.norm(aircraft.get("velocity", [0, 0, 0]))
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            participant = stats["participants"][aircraft["id"]]
            participant["max_altitude"] = max(participant["max_altitude"], aircraft["position"][2])
            participant["min_altitude"] = min(participant["min_altitude"], aircraft["position"][2])
            speed = np.linalg.norm(aircraft.get("velocity", [0, 0, 0]))
            participant["max_speed"] = max(participant["max_speed"], speed)
            
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats["max_altitude"] = max(stats["max_altitude"], aircraft["position"][2])
            stats["min_altitude"] = min(stats["min_altitude"], aircraft["position"][2])
            stats["max_speed"] = max(stats["max_speed"], speed)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏
        final_kills = frame.get("kills", {"red": 0, "blue": 0})
        stats["casualties"] = final_kills
        
        # –†–∞–∫–µ—Ç—ã
        final_missiles = frame.get("missiles_fired", {"red": 0, "blue": 0})
        stats["missiles_fired"] = final_missiles
    
    return stats

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "demo":
            demo_visualization()
        elif sys.argv[1] == "analyze" and len(sys.argv) > 2:
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –±–æ—è
            with open(sys.argv[2], 'r') as f:
                data = json.load(f)
            
            frames = data if isinstance(data, list) else data.get("frames", [data])
            stats = analyze_battle_statistics(frames)
            
            print("üìä Battle Analysis:")
            for key, value in stats.items():
                print(f"  {key}: {value}")
        else:
            print("Usage:")
            print("  python aircraft_visualization.py demo")
            print("  python aircraft_visualization.py analyze <battle_file.json>")
    else:
        print("üé® Aircraft Visualization System")
        print("Features:")
        print("- 3D matplotlib visualization of air combat")
        print("- Real-time animation with aircraft trails")
        print("- Missile tracking and ballistics")  
        print("- Interactive controls and camera following")
        print("- Export to GIF/MP4")
        print("- Battle statistics analysis")